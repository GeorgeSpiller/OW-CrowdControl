import "HUDController.ostw";
import "Controller.ostw";

void DoubleSpeedDoubleDamage() "Apply Double Speed and Double Damage Action" // Adding ! when calling will do nothing if it is already executing.
{
    EffectText(10, "Double Speed, Double Damage (10s)");
    // start the double sped double damage
    SetMoveSpeed(AllPlayers(), 200);
    SetDamageDealt(AllPlayers(), 200);
    Wait(10);   // wait 10 seconds
    SetMoveSpeed(AllPlayers(), 100);
    SetDamageDealt(AllPlayers(), 100);
}

void SlowMotionLowGravity() "Apply Slow Motion, Low Gravity Action" // Adding ! when calling will do nothing if it is already executing.
{
    EffectText(5, "Slow Motion, Low Gravity (10s)");
    SetGravity(AllPlayers(), 50);
    SetSlowMotion(50);
    SetAimSpeed(AllPlayers(), 50);
    Wait(5);   // wait 10 seconds
    SetGravity(AllPlayers(), 100);
    SetSlowMotion(100);
    SetAimSpeed(AllPlayers(), 100);
}

void ForceUltimate() "Apply Force Ultimate Action" // Adding ! when calling will do nothing if it is already executing.
{
    EffectText(5, "Force Ultimates for everyone");
    // save the ultimate charge percentage of all players
    Number[] PlayerUltimatePerentages;
    Player currentPlayer;
    Player target;
    for (define i = 0; CountOf(AllPlayers()); 1)
    {
        currentPlayer = AllPlayers()[i];
        PlayerUltimatePerentages[i] = UltimateChargePercent(currentPlayer);
    }
    Wait(5);
    SetUltimateCharge(AllPlayers(), 100);
    PressButton(AllPlayers(), Button.Ultimate);
    Wait(1);
    PressButton(AllPlayers(), Button.PrimaryFire);

    // reset the ultimate charge percentate of all players
    for (define i = 0; i < AllPlayers().Length; i++)
    {
        currentPlayer = AllPlayers()[i];
        SetUltimateCharge(currentPlayer, PlayerUltimatePerentages[i]); 
    }
}

void NoClip() "NoClip Action" // Adding ! when calling will do nothing if it is already executing.
{
    EffectText(10, "NoClip (10s)");
    SetGravity(AllPlayers(), 0);
    DisableMovementCollisionWithEnvironment(AllPlayers(), true);
    isNoclipActive = true;
    WaitAsync(10, () => 
    {
        isNoclipActive = false;
    });
    while (isNoclipActive) {
    // -- no clip active
        for (define i = 0; i < CountOf(AllPlayers()); i++) 
        {
            Player currentPlayer = AllPlayers()[i];
            applyNoclipImpulse(currentPlayer);
        }
        Wait(0.1);
    }
    // -- end of no clip
    EnableMovementCollisionWithEnvironment(AllPlayers());
    SetGravity(AllPlayers(), 100);
    // foreach player check they are in bounds
    Player currentPlayer;
    Number[] OOBTextIds; 
    Wait(5);
    for (define i = 0; i < CountOf(AllPlayers()); i++) 
    {
        currentPlayer = AllPlayers()[i];
        if (MagnitudeOf(NearestWalkablePosition(currentPlayer) - PositionOf(currentPlayer)) > 1 || 
        !IsOnGround(currentPlayer)) 
        {
            CreateHudText(
                VisibleTo: currentPlayer,
                Header   : IconString(Icon.Warning),
                Text     : $"You were out of bounds and have been teleported back in bounds.",
                HeaderColor: Color.Red,
                Reevaluation: HudTextRev.StringAndColor
            );
            OOBTextIds[i] = LastTextID();
            Teleport(currentPlayer, NearestWalkablePosition(currentPlayer));
        }
    }
    // message players who were OOB for 5 seconds
    WaitAsync(5, () => 
    {
        for (define i = 0; i < CountOf(OOBTextIds); i++) 
        {
            DestroyHudText(OOBTextIds[i]);
        }
    });
}

void applyNoclipImpulse(Player p) "Helper to apply impulse to players who are noclipping"
{
    if (IsButtonHeld(p, Button.Jump)) 
    {
        ApplyImpulse(p, Vector(0, 1, 0), 1, Relative.ToPlayer, ContraryMotion.Incorporate);
    }
    if (IsButtonHeld(p, Button.Crouch)) 
    {
        ApplyImpulse(p, Vector(0, -1, 0), 1, Relative.ToPlayer, ContraryMotion.Incorporate);
    }
}


void RandomSizes() "Applies random Sizes Action" // Adding ! when calling will do nothing if it is already executing.
{
    EffectText(10, "Random Size");
    Player currentPlayer;
    for (define i = 0; i < CountOf(AllPlayers()); i++) 
    {
        currentPlayer = AllPlayers()[i];
        StartScalingPlayer(currentPlayer, RandomReal(0.2, 3), false);
    }
    Wait(10);
    StartScalingPlayer(AllPlayers(), 1, false);
}
