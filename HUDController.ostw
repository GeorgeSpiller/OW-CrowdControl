import "Controller.ostw";

void EffectText(define seconds, String text)
{
    
    define ProgressBarCurrentProgress = 100;
    CreateProgressBarHudText(
        VisibleTo: AllPlayers(),
        Value: ProgressBarCurrentProgress,
        Text: text,
        Location: Location.Top,
        SortOrder: 3,
        ProgressBarColor: Color.Aqua,
        TextColor: Color.Gray,
        Reevaluation: ProgressBarHudEvaluation.Values,
        NonteamSpectators: Spectators.VisibleAlways
    );
    define ProgressBarID = LastTextID();
    
    ChaseVariableOverTime(ProgressBarCurrentProgress, 0, seconds, TimeChaseReevaluation.DestinationAndDuration);

    WaitAsync(seconds, () => 
    {
        //DestroyHudText(HUDTextID);
        DestroyProgressBarHudText(ProgressBarID);
    });
}



void DisplayInputs(Player p) 
{

    // Button.Crouch
    if (p.IsButtonHeld(Button.Crouch) )
    {
        commandButtonsPressed[0] = "Crouch";
    } else
    {
        ModifyVariable(commandButtonsPressed, Operation.RemoveFromArrayByValue, "Crouch");
    }

    // Button.Ability1
    if (p.IsButtonHeld(Button.Ability1) )
    {
        commandButtonsPressed[1] = "Ability1";
    } else
    {
        ModifyVariable(commandButtonsPressed, Operation.RemoveFromArrayByValue, "Ability1");
    }

        // Button.Ability2
    if (p.IsButtonHeld(Button.Ability2) )
    {
        commandButtonsPressed[1] = "Ability2";
    } else
    {
        ModifyVariable(commandButtonsPressed, Operation.RemoveFromArrayByValue, "Ability2");
    }

        // Button.Interact
    if (p.IsButtonHeld(Button.Interact) )
    {
        commandButtonsPressed[1] = "Interact";
    } else
    {
        ModifyVariable(commandButtonsPressed, Operation.RemoveFromArrayByValue, "Interact");
    }


}

