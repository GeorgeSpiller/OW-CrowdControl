//import "DebugGameSettings.json";
import "CompetitiveGameSettings.json";
import "Effects.ostw";
import "HUDController.ostw";
import "MenuItem.ostw";

// CODE:
// v1.0: X7872
// v1.2: 099VT

// Enabled/dissabled effects
playervar Boolean Enable_DoubleTime = true;
playervar Boolean Enable_SlowDown = false;
playervar Boolean Enable_UltimateFiesta = true;
playervar Boolean Enable_NoClip = true;
playervar Boolean Enable_RandomSize = true;

// Controller HUD effect colors
playervar Color Color_NULL = Color.Gray;
playervar Color Color_DoubleTime = Color.Gray;
playervar Color Color_SlowDown = Color.Gray;
playervar Color Color_UltimateFiesta = Color.Gray;
playervar Color Color_NoClip = Color.Gray;
playervar Color Color_RandomSize = Color.Gray;
playervar MenuItem[] menuUtems;    // this is set in rule: "Player Controller - Startup Setup" by calling createMenu()
playervar Player ControlPlayer;
playervar Boolean hasBeenInstanciated = false;  
globalvar Boolean isNoclipActive = false;
playervar Number currentlySelectedMenuID = 0;


// first time setup
 rule: "Player Controller - Startup Setup"
 Event.OngoingPlayer
 if (SlotOf(EventPlayer()) ==  5)
 if (IsGameInProgress() || IsInSpawnRoom() || IsInSetup())    //  
 {
    ControlPlayer = EventPlayer();
    // first time setup
    Wait(1);
    SetStatus(ControlPlayer, null, Status.Invincible, 9999);
    SetStatus(ControlPlayer, null, Status.PhasedOut, 9999);
    SetInvisible(ControlPlayer, InvisibleTo.All);
    SetAbility1Enabled(ControlPlayer, false);
    SetAbility2Enabled(ControlPlayer, false);
    SetUltimateAbilityEnabled(ControlPlayer, false);
    // Disabling the inspector can improve server load.
    DisableInspectorRecording();

    // only creat menu on the first run. This function can run again as the coltrol player swaps teams from meteor shower
    if (!hasBeenInstanciated) 
    {
        createMenu(ControlPlayer, 0);
        
        // create information HUD text
        CreateHudText(
                VisibleTo: ControlPlayer,
                Header   : IconString(Icon.ExclamationMark),
                Text     : $"{AbilityIconString(ControlPlayer.Hero(), Button.Ability2)}.............| Move Down\n{AbilityIconString(ControlPlayer.Hero(), Button.PrimaryFire)}..| Activate Effect\n{AbilityIconString(ControlPlayer.Hero(), Button.Ultimate)}............| Move Up",
                TextColor: Color.SkyBlue,
                Location : Location.Right,
                HeaderColor: Color.Blue,
                Reevaluation:HudTextRev.String
        );
    }

    hasBeenInstanciated = true;
 }


 rule: "Player Controller - Menue and Abilities" -1 // the -1 sets its priority (lower numbrt = higher priority)
 Event.OngoingPlayer
 if (SlotOf(EventPlayer()) ==  5)
 {
    Player p = EventPlayer();
    // get a list of all the available effects
    while(true) 
    {
        setSelected(currentlySelectedMenuID);
        handelMenuScrolling();
        Wait(0.13);
    }
 }


 rule: "Player Controller - reset"
 Event.OngoingPlayer
 if (SlotOf(EventPlayer()) !=  5)
 if (IsGameInProgress())
 {
    Player NonControlPlayer = EventPlayer();
    // first time setup
    ClearStatus(NonControlPlayer, Status.Invincible);
    ClearStatus(NonControlPlayer, Status.PhasedOut);
    SetInvisible(NonControlPlayer, InvisibleTo.None);
    SetAbility1Enabled(NonControlPlayer, true);
    SetAbility2Enabled(NonControlPlayer, true);
    SetUltimateAbilityEnabled(NonControlPlayer, true);
 }


void handelMenuScrolling() 
{
    if (EventPlayer().IsButtonHeld(Button.Ability2)) 
    {
        currentlySelectedMenuID = currentlySelectedMenuID + 1;
        if (currentlySelectedMenuID >= menuUtems.Length) 
        {
            currentlySelectedMenuID = 0;
        }
    }
    if (EventPlayer().IsButtonHeld(Button.Ultimate)) 
    {
        currentlySelectedMenuID = currentlySelectedMenuID - 1;
        if (currentlySelectedMenuID <= -1)  
        {
            currentlySelectedMenuID = menuUtems.Length - 1;
        }
    }
}


void createMenu(Player p, Number selected) 
{

    MenuItem mi_null = new MenuItem(null);
    menuUtems.Append(mi_null);

    if (Enable_DoubleTime) {
        MenuItem mi_DoubleTime = new MenuItem(DoubleSpeedDoubleDamage);
        mi_DoubleTime.setCurrentHUDColor(Color.LimeGreen);
        menuUtems.Append(mi_DoubleTime);
        CreateHudText(      
            VisibleTo: p,
            Header   : "Double Time",
            Text     : $" ",
            HeaderColor: mi_DoubleTime.getCurrentHUDColor(),
            Reevaluation: HudTextRev.Color
        );
    }

    if (Enable_SlowDown) {
        MenuItem mi_SlowDown = new MenuItem(SlowMotionLowGravity);
        menuUtems.Append(mi_SlowDown);
        CreateHudText(      
            VisibleTo: p,
            Header   : "Slow Down",
            Text     : $" ",
            HeaderColor: mi_SlowDown.getCurrentHUDColor(),
            Reevaluation: HudTextRev.Color
        );
    }

    if (Enable_UltimateFiesta) {
        MenuItem mi_UltimateFiesta = new MenuItem(ForceUltimate);
        menuUtems.Append(mi_UltimateFiesta);
        CreateHudText(      
            VisibleTo: p,
            Header   : "Ultimate Fiesta",
            Text     : $" ",
            HeaderColor: mi_UltimateFiesta.getCurrentHUDColor(),
            Reevaluation: HudTextRev.Color
        );
    }

    if (Enable_NoClip) {
        MenuItem mi_NoClip = new MenuItem(NoClip);
        menuUtems.Append(mi_NoClip);
        CreateHudText(      
            VisibleTo: p,
            Header   : "No Clip",
            Text     : $" ",
            HeaderColor: mi_NoClip.getCurrentHUDColor(),
            Reevaluation: HudTextRev.Color
        );
    }

    if (Enable_RandomSize) {
        MenuItem mi_RandomSize = new MenuItem(RandomSizes);
        menuUtems.Append(mi_RandomSize);
        CreateHudText(      
            VisibleTo: p,
            Header   : "Random Size",
            Text     : $" ",
            HeaderColor: mi_RandomSize.getCurrentHUDColor(),
            Reevaluation: HudTextRev.Color
        );
    }
}



void setSelected(Number currSelectedEffect) 
{
    Number prevEffectIndex = currSelectedEffect - 1;
    Number nextEffectIndex = currSelectedEffect + 1;
    if (prevEffectIndex == -1) {prevEffectIndex = menuUtems.Length - 1; }
    if (currSelectedEffect == menuUtems.Length) {currSelectedEffect = 0; }

    //menuUtems[prevEffectIndex].setActive(false);
    menuUtems[currSelectedEffect].setActive(true);
    menuUtems[currSelectedEffect].setCurrentHUDColor(Color.Aqua);
    //menuUtems[nextEffectIndex].setActive(false);

}