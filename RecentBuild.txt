settings
{
    main
    {
        Description: "Overwatch Croud Control by TheFabiest and Spaggettiohs (Arena 51 Gaming). The Control player who inputs effects should always be in slot 5 (last slot) of team 1."
    }
    lobby
    {
        Max Team 1 Players: 6
        Max Team 2 Players: 5
        Pause Game On Player Disconnect: Yes
    }
    modes
    {
        General
        {
            Game Mode Start: Manual
            Limit Roles: 1 Tank 2 Offense 2 Support
            Respawn Time Scalar: 70%
        }
        Assault
        {
            Competitive Rules: On
        }
        Control
        {
            Competitive Rules: On
        }
        Escort
        {
            Competitive Rules: On
        }
        Hybrid
        {
            Competitive Rules: On
        }
        Push
        {
            Competitive Rules: On
        }
    }
}

variables
{
    global:
        0: isNoclipActive
        1: seconds
        2: text
        3: ProgressBarCurrentProgress
        4: ProgressBarID
        5: waitAsync_queue
        6: waitAsync_item
        7: func_group
        8: seconds_0
        9: text_0
        10: ProgressBarCurrentProgress_0
        11: ProgressBarID_0
        12: seconds_1
        13: text_1
        14: ProgressBarCurrentProgress_1
        15: ProgressBarID_1
        16: PlayerUltimatePerentages
        17: currentPlayer
        18: target
        19: i
        20: i_0
        21: seconds_2
        22: text_2
        23: ProgressBarCurrentProgress_2
        24: ProgressBarID_2
        25: currentPlayer_0
        26: OOBTextIds
        27: i_1
        28: seconds_3
        29: text_3
        30: ProgressBarCurrentProgress_3
        31: ProgressBarID_3
        32: currentPlayer_1
        33: i_2
        34: i_3
    player:
        0: Color_DoubleTime
        1: Color_SlowDown
        2: Color_UltimateFiesta
        3: Color_NoClip
        4: Color_RandomSize
        5: numberOfEffects
        6: ControlPlayer
        7: hasBeenInstanciated
        8: currentlySelectedMenuID
        9: p
        10: selected
        11: p_0
        12: NonControlPlayer
}

subroutines
{
    0: DoubleSpeedDoubleDamage
    1: func_group
    2: SlowMotionLowGravity
    3: ForceUltimate
    4: NoClip
    5: RandomSizes
}

rule("Player Controller - Menue and Abilities")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Slot Of(Event Player) == 5;
        Not(Is Dummy Bot(Event Player)) == True;
    }

    // Action count: 52
    actions
    {
        Set Player Variable(Event Player, p_0, Event Player);
        While(True);
            If(Compare(Player Variable(Event Player, currentlySelectedMenuID), ==, 0));
                Set Player Variable(Event Player, Color_RandomSize, Color(Gray));
                Set Player Variable(Event Player, Color_DoubleTime, Color(Sky Blue));
                Set Player Variable(Event Player, Color_SlowDown, Color(Gray));
                If(Is Button Held(Player Variable(Event Player, p_0), Button(Primary Fire)));
                    Start Rule(DoubleSpeedDoubleDamage, Do Nothing);
                End;
                Else If(Compare(Player Variable(Event Player, currentlySelectedMenuID), ==, 1));
                Set Player Variable(Event Player, Color_DoubleTime, Color(Gray));
                Set Player Variable(Event Player, Color_SlowDown, Color(Sky Blue));
                Set Player Variable(Event Player, Color_UltimateFiesta, Color(Gray));
                If(Is Button Held(Player Variable(Event Player, p_0), Button(Primary Fire)));
                    Start Rule(SlowMotionLowGravity, Do Nothing);
                End;
                Else If(Compare(Player Variable(Event Player, currentlySelectedMenuID), ==, 2));
                Set Player Variable(Event Player, Color_SlowDown, Color(Gray));
                Set Player Variable(Event Player, Color_UltimateFiesta, Color(Sky Blue));
                Set Player Variable(Event Player, Color_NoClip, Color(Gray));
                If(Is Button Held(Player Variable(Event Player, p_0), Button(Primary Fire)));
                    Start Rule(ForceUltimate, Do Nothing);
                End;
                Else If(Compare(Player Variable(Event Player, currentlySelectedMenuID), ==, 3));
                Set Player Variable(Event Player, Color_UltimateFiesta, Color(Gray));
                Set Player Variable(Event Player, Color_NoClip, Color(Sky Blue));
                Set Player Variable(Event Player, Color_RandomSize, Color(Gray));
                If(Is Button Held(Player Variable(Event Player, p_0), Button(Primary Fire)));
                    Start Rule(NoClip, Do Nothing);
                End;
                Else If(Compare(Player Variable(Event Player, currentlySelectedMenuID), ==, 4));
                Set Player Variable(Event Player, Color_NoClip, Color(Gray));
                Set Player Variable(Event Player, Color_RandomSize, Color(Sky Blue));
                Set Player Variable(Event Player, Color_DoubleTime, Color(Gray));
                If(Is Button Held(Player Variable(Event Player, p_0), Button(Primary Fire)));
                    Start Rule(RandomSizes, Do Nothing);
                End;
            End;
            If(Is Button Held(Event Player, Button(Ability 2)));
                Set Player Variable(Event Player, currentlySelectedMenuID, Add(Player Variable(Event Player, currentlySelectedMenuID), 1));
                If(Compare(Player Variable(Event Player, currentlySelectedMenuID), >=, Player Variable(Event Player, numberOfEffects)));
                    Set Player Variable(Event Player, currentlySelectedMenuID, 0);
                End;
            End;
            If(Is Button Held(Event Player, Button(Ultimate)));
                Set Player Variable(Event Player, currentlySelectedMenuID, Subtract(Player Variable(Event Player, currentlySelectedMenuID), 1));
                If(Compare(Player Variable(Event Player, currentlySelectedMenuID), <=, -1));
                    Set Player Variable(Event Player, currentlySelectedMenuID, Subtract(Player Variable(Event Player, numberOfEffects), 1));
                End;
            End;
            Wait(0.15, Ignore Condition);
        End;
    }
}

rule("Initial Global")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 3
    actions
    {
        Set Global Variable(isNoclipActive, False);
        Set Global Variable(waitAsync_queue, Empty Array);
        Set Global Variable(func_group, Empty Array);
    }
}

rule("Initial Player")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Action count: 8
    actions
    {
        Set Player Variable(Event Player, Color_DoubleTime, Color(Gray));
        Set Player Variable(Event Player, Color_SlowDown, Color(Gray));
        Set Player Variable(Event Player, Color_UltimateFiesta, Color(Gray));
        Set Player Variable(Event Player, Color_NoClip, Color(Gray));
        Set Player Variable(Event Player, Color_RandomSize, Color(Gray));
        Set Player Variable(Event Player, numberOfEffects, 5);
        Set Player Variable(Event Player, hasBeenInstanciated, False);
        Set Player Variable(Event Player, currentlySelectedMenuID, 0);
    }
}

rule("Player Controller - Startup Setup")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Slot Of(Event Player) == 5;
        Or(Or(Is Game In Progress, Is In Spawn Room(Event Player)), Is In Setup) == True;
    }

    // Action count: 21
    actions
    {
        Set Player Variable(Event Player, ControlPlayer, Event Player);
        Start Forcing Player To Be Hero(Player Variable(Event Player, ControlPlayer), Hero(Ana));
        Wait(1, Ignore Condition);
        Set Status(Player Variable(Event Player, ControlPlayer), Null, Invincible, 9999);
        Set Status(Player Variable(Event Player, ControlPlayer), Null, Phased Out, 9999);
        Set Invisible(Player Variable(Event Player, ControlPlayer), All);
        Set Ability 1 Enabled(Player Variable(Event Player, ControlPlayer), False);
        Set Ability 2 Enabled(Player Variable(Event Player, ControlPlayer), False);
        Set Ultimate Ability Enabled(Player Variable(Event Player, ControlPlayer), False);
        Disable Inspector Recording;
        If(Not(Player Variable(Event Player, hasBeenInstanciated)));
            Set Player Variable(Event Player, p, Player Variable(Event Player, ControlPlayer));
            Set Player Variable(Event Player, selected, 0);
            Create HUD Text(Player Variable(Event Player, p), Custom String("Double Time", Null, Null, Null), Null, Custom String(" ", Null, Null, Null), Left, 0, Player Variable(Event Player, Color_DoubleTime), Color(White), Color(White), String And Color, Default Visibility);
            Create HUD Text(Player Variable(Event Player, p), Custom String("Slow Down", Null, Null, Null), Null, Custom String(" ", Null, Null, Null), Left, 0, Player Variable(Event Player, Color_SlowDown), Color(White), Color(White), String And Color, Default Visibility);
            Create HUD Text(Player Variable(Event Player, p), Custom String("Ult Fiesta", Null, Null, Null), Null, Custom String(" ", Null, Null, Null), Left, 0, Player Variable(Event Player, Color_UltimateFiesta), Color(White), Color(White), String And Color, Default Visibility);
            Create HUD Text(Player Variable(Event Player, p), Custom String("NoClip", Null, Null, Null), Null, Custom String(" ", Null, Null, Null), Left, 0, Player Variable(Event Player, Color_NoClip), Color(White), Color(White), String And Color, Default Visibility);
            Create HUD Text(Player Variable(Event Player, p), Custom String("Random Sizes", Null, Null, Null), Null, Custom String(" ", Null, Null, Null), Left, 0, Player Variable(Event Player, Color_RandomSize), Color(White), Color(White), String And Color, Default Visibility);
            Create HUD Text(Player Variable(Event Player, ControlPlayer), Icon String(Exclamation Mark), Null, Custom String("{0}{1}", Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Ability Icon String(Hero Of(Player Variable(Event Player, ControlPlayer)), Button(Ability 2)), Custom String(".............| Move Down\n", Null, Null, Null), Ability Icon String(Hero Of(Player Variable(Event Player, ControlPlayer)), Button(Primary Fire))), Custom String("..| Activate Effect\n", Null, Null, Null), Ability Icon String(Hero Of(Player Variable(Event Player, ControlPlayer)), Button(Ultimate))), Custom String("............| Move Up", Null, Null, Null), Null), Right, 0, Color(Blue), Color(White), Color(Sky Blue), None, Default Visibility);
        End;
        Set Player Variable(Event Player, hasBeenInstanciated, True);
    }
}

rule("waitAsync")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is True For Any(Global Variable(waitAsync_queue), Compare(Total Time Elapsed, >=, Value In Array(Current Array Element, 0))) == True;
    }

    // Action count: 5
    actions
    {
        Set Global Variable(waitAsync_item, First Of(Filtered Array(Mapped Array(Global Variable(waitAsync_queue), Current Array Index), Compare(Total Time Elapsed, >=, Value In Array(Value In Array(Global Variable(waitAsync_queue), Current Array Element), 0)))));
        Modify Global Variable(func_group, Append To Array, Array(Last Of(Value In Array(Global Variable(waitAsync_queue), Global Variable(waitAsync_item)))));
        Call Subroutine(func_group);
        Modify Global Variable(waitAsync_queue, Remove From Array By Index, Global Variable(waitAsync_item));
        Loop If Condition Is True;
    }
}

rule("Apply Double Speed and Double Damage Action")
{

    event
    {
        Subroutine;
        DoubleSpeedDoubleDamage;
    }

    // Action count: 12
    actions
    {
        Set Global Variable(seconds, 10);
        Set Global Variable(text, Custom String("Double Speed, Double Damage (10s)"));
        Set Global Variable(ProgressBarCurrentProgress, 100);
        Create Progress Bar HUD Text(All Players(Team(All)), Global Variable(ProgressBarCurrentProgress), Custom String("{0}{1}", Custom String("\n"), Global Variable(text), Null), Top, 3, Color(Aqua), Color(Blue), Values, Visible Always);
        Set Global Variable(ProgressBarID, Last Text ID);
        Chase Global Variable Over Time(ProgressBarCurrentProgress, 0, Global Variable(seconds), Destination And Duration);
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, Global Variable(seconds)), Array(1, Null, Global Variable(ProgressBarID)))));
        Set Move Speed(All Players(Team(All)), 200);
        Set Damage Dealt(All Players(Team(All)), 200);
        Wait(10, Ignore Condition);
        Set Move Speed(All Players(Team(All)), 100);
        Set Damage Dealt(All Players(Team(All)), 100);
    }
}

rule("Apply Slow Motion, Low Gravity Action")
{

    event
    {
        Subroutine;
        SlowMotionLowGravity;
    }

    // Action count: 14
    actions
    {
        Set Global Variable(seconds_0, 5);
        Set Global Variable(text_0, Custom String("Slow Motion, Low Gravity (10s)"));
        Set Global Variable(ProgressBarCurrentProgress_0, 100);
        Create Progress Bar HUD Text(All Players(Team(All)), Global Variable(ProgressBarCurrentProgress_0), Custom String("{0}{1}", Custom String("\n"), Global Variable(text_0), Null), Top, 3, Color(Aqua), Color(Blue), Values, Visible Always);
        Set Global Variable(ProgressBarID_0, Last Text ID);
        Chase Global Variable Over Time(ProgressBarCurrentProgress_0, 0, Global Variable(seconds_0), Destination And Duration);
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, Global Variable(seconds_0)), Array(1, Null, Global Variable(ProgressBarID_0)))));
        Set Gravity(All Players(Team(All)), 50);
        Set Slow Motion(50);
        Set Aim Speed(All Players(Team(All)), 50);
        Wait(5, Ignore Condition);
        Set Gravity(All Players(Team(All)), 100);
        Set Slow Motion(100);
        Set Aim Speed(All Players(Team(All)), 100);
    }
}

rule("Apply Force Ultimate Action")
{

    event
    {
        Subroutine;
        ForceUltimate;
    }

    // Action count: 24
    actions
    {
        Set Global Variable(seconds_1, 5);
        Set Global Variable(text_1, Custom String("Force Ultimates for everyone"));
        Set Global Variable(ProgressBarCurrentProgress_1, 100);
        Create Progress Bar HUD Text(All Players(Team(All)), Global Variable(ProgressBarCurrentProgress_1), Custom String("{0}{1}", Custom String("\n"), Global Variable(text_1), Null), Top, 3, Color(Aqua), Color(Blue), Values, Visible Always);
        Set Global Variable(ProgressBarID_1, Last Text ID);
        Chase Global Variable Over Time(ProgressBarCurrentProgress_1, 0, Global Variable(seconds_1), Destination And Duration);
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, Global Variable(seconds_1)), Array(1, Null, Global Variable(ProgressBarID_1)))));
        Set Global Variable(PlayerUltimatePerentages, 0);
        Set Global Variable(currentPlayer, 0);
        Set Global Variable(target, 0);
        For Global Variable(i, 0, Count Of(All Players(Team(All))), 1);
            Set Global Variable(currentPlayer, Value In Array(All Players(Team(All)), Global Variable(i)));
            Set Global Variable At Index(PlayerUltimatePerentages, Global Variable(i), Ultimate Charge Percent(Global Variable(currentPlayer)));
        End;
        Set Ultimate Charge(All Players(Team(All)), 100);
        Press Button(All Players(Team(All)), Button(Ultimate));
        Wait(5, Ignore Condition);
        Press Button(All Players(Team(All)), Button(Primary Fire));
        Set Global Variable(i_0, 0);
        While(Compare(Global Variable(i_0), <, Count Of(All Players(Team(All)))));
            Set Global Variable(currentPlayer, Value In Array(All Players(Team(All)), Global Variable(i_0)));
            Set Ultimate Charge(Global Variable(currentPlayer), Value In Array(Global Variable(PlayerUltimatePerentages), Global Variable(i_0)));
            Modify Global Variable(i_0, Add, 1);
        End;
    }
}

rule("NoClip Action")
{

    event
    {
        Subroutine;
        NoClip;
    }

    // Action count: 28
    actions
    {
        Set Global Variable(seconds_2, 10);
        Set Global Variable(text_2, Custom String("NoClip (10s)"));
        Set Global Variable(ProgressBarCurrentProgress_2, 100);
        Create Progress Bar HUD Text(All Players(Team(All)), Global Variable(ProgressBarCurrentProgress_2), Custom String("{0}{1}", Custom String("\n"), Global Variable(text_2), Null), Top, 3, Color(Aqua), Color(Blue), Values, Visible Always);
        Set Global Variable(ProgressBarID_2, Last Text ID);
        Chase Global Variable Over Time(ProgressBarCurrentProgress_2, 0, Global Variable(seconds_2), Destination And Duration);
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, Global Variable(seconds_2)), Array(1, Null, Global Variable(ProgressBarID_2)))));
        Set Global Variable(isNoclipActive, True);
        Set Gravity(All Players(Team(All)), 0);
        Disable Movement Collision With Environment(All Players(Team(All)), True);
        Wait(10, Ignore Condition);
        Enable Movement Collision With Environment(All Players(Team(All)));
        Set Gravity(All Players(Team(All)), 100);
        Set Global Variable(isNoclipActive, False);
        Set Global Variable(currentPlayer_0, 0);
        Set Global Variable(OOBTextIds, 0);
        Wait(5, Ignore Condition);
        Set Global Variable(i_1, 0);
        While(Compare(Global Variable(i_1), <, Count Of(All Players(Team(All)))));
            Set Global Variable(currentPlayer_0, Value In Array(All Players(Team(All)), Global Variable(i_1)));
            If(Compare(Magnitude Of(Subtract(Nearest Walkable Position(Global Variable(currentPlayer_0)), Position Of(Global Variable(currentPlayer_0)))), >, 1));
                Create HUD Text(Global Variable(currentPlayer_0), Icon String(Warning), Null, Custom String("You were out of bounds and have been teleported back in bounds."), Left, 0, Color(Red), Color(White), Color(White), String And Color, Default Visibility);
                Set Global Variable At Index(OOBTextIds, Global Variable(i_1), Last Text ID);
                Teleport(Global Variable(currentPlayer_0), Nearest Walkable Position(Global Variable(currentPlayer_0)));
            End;
            Modify Global Variable(i_1, Add, 1);
        End;
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, 5), Array(2, Null, Global Variable(OOBTextIds)))));
    }
}

rule("Applies random Sizes Action")
{

    event
    {
        Subroutine;
        RandomSizes;
    }

    // Action count: 16
    actions
    {
        Set Global Variable(seconds_3, 10);
        Set Global Variable(text_3, Custom String("Random Size"));
        Set Global Variable(ProgressBarCurrentProgress_3, 100);
        Create Progress Bar HUD Text(All Players(Team(All)), Global Variable(ProgressBarCurrentProgress_3), Custom String("{0}{1}", Custom String("\n"), Global Variable(text_3), Null), Top, 3, Color(Aqua), Color(Blue), Values, Visible Always);
        Set Global Variable(ProgressBarID_3, Last Text ID);
        Chase Global Variable Over Time(ProgressBarCurrentProgress_3, 0, Global Variable(seconds_3), Destination And Duration);
        Modify Global Variable(waitAsync_queue, Append To Array, Array(Array(Add(Total Time Elapsed, Global Variable(seconds_3)), Array(1, Null, Global Variable(ProgressBarID_3)))));
        Set Global Variable(currentPlayer_1, 0);
        Set Global Variable(i_2, 0);
        While(Compare(Global Variable(i_2), <, Count Of(All Players(Team(All)))));
            Set Global Variable(currentPlayer_1, Value In Array(All Players(Team(All)), Global Variable(i_2)));
            Start Scaling Player(Global Variable(currentPlayer_1), Random Real(0.2, 3), False);
            Modify Global Variable(i_2, Add, 1);
        End;
        Wait(10, Ignore Condition);
        Start Scaling Player(All Players(Team(All)), 1, False);
    }
}

rule("Player Controller - reset")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Slot Of(Event Player) != 5;
        Is Game In Progress == True;
    }

    // Action count: 8
    actions
    {
        Set Player Variable(Event Player, NonControlPlayer, Event Player);
        Stop Forcing Player To Be Hero(Player Variable(Event Player, ControlPlayer));
        Clear Status(Player Variable(Event Player, NonControlPlayer), Invincible);
        Clear Status(Player Variable(Event Player, NonControlPlayer), Phased Out);
        Set Invisible(Player Variable(Event Player, NonControlPlayer), None);
        Set Ability 1 Enabled(Player Variable(Event Player, NonControlPlayer), True);
        Set Ability 2 Enabled(Player Variable(Event Player, NonControlPlayer), True);
        Set Ultimate Ability Enabled(Player Variable(Event Player, NonControlPlayer), True);
    }
}

rule("Apply Noclip Impulse")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Global Variable(isNoclipActive) == True;
    }

    // Action count: 9
    actions
    {
        While(Global Variable(isNoclipActive));
            If(Is Button Held(Event Player, Button(Jump)));
                Apply Impulse(Event Player, Up, 1, To Player, Incorporate Contrary Motion);
            End;
            If(Is Button Held(Event Player, Button(Crouch)));
                Apply Impulse(Event Player, Down, 1, To Player, Incorporate Contrary Motion);
            End;
            Wait(0.1, Ignore Condition);
        End;
    }
}

rule("lambda")
{

    event
    {
        Subroutine;
        func_group;
    }

    // Action count: 9
    actions
    {
        Skip(Value In Array(Array(7, 0, 2), Add(Index Of Array Value(Array(1, 2), Value In Array(Last Of(Global Variable(func_group)), 0)), 1)));
        Destroy Progress Bar HUD Text(Value In Array(Last Of(Global Variable(func_group)), 2));
        Skip(5);
        Modify Global Variable(i_3, Append To Array, 0);
        While(Compare(Last Of(Global Variable(i_3)), <, Count Of(Value In Array(Last Of(Global Variable(func_group)), 2))));
            Destroy HUD Text(Value In Array(Value In Array(Last Of(Global Variable(func_group)), 2), Last Of(Global Variable(i_3))));
            Modify Global Variable At Index(i_3, Subtract(Count Of(Global Variable(i_3)), 1), Add, 1);
        End;
        Modify Global Variable(func_group, Remove From Array By Index, Subtract(Count Of(Global Variable(func_group)), 1));
    }
}

